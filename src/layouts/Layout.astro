---
import { LOCALE, SITE } from "../config";
import "../../styles/base.css";
import "../../styles/reveal.css";
import { ViewTransitions } from "astro:transitions";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import ScrollToTop from "../components/shared/ScrollToTop.astro";
import ChatButton from "../components/shared/ChatButton.astro";

const googleSiteVerification = import.meta.env.PUBLIC_GOOGLE_SITE_VERIFICATION;
export interface Props {
  title?: string;
  author?: string;
  description?: string;
  ogImage?: string;
  canonicalURL?: string;
  pubDatetime?: Date;
  modDatetime?: Date;
  activeNav?: "/" | "about" | "news" | "gallery" | "contact-us";
}

const {
  title = SITE.title,
  author = SITE.author,
  description = SITE.desc,
  ogImage = SITE.ogImage,
  canonicalURL = new URL(Astro.url.pathname, Astro.site).href,
  pubDatetime,
  modDatetime,
} = Astro.props;

const socialImageURL = new URL(
  ogImage ?? SITE.ogImage ?? "og.png",
  Astro.url.origin
).href;

const { activeNav } = Astro.props;
---

<!doctype html>
<html lang=`${LOCALE.lang ?? "en"}` class="text-sm sm:text-base">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicons/favicon.ico" />
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />

    <!-- General Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={author} />
    <link rel="sitemap" href="/sitemap-index.xml" />

    <!-- Open Graph / Facebook -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={socialImageURL} />

    <!-- Article Published/Modified time -->
    {
      pubDatetime && (
        <meta
          property="article:published_time"
          content={pubDatetime.toISOString()}
        />
      )
    }
    {
      modDatetime && (
        <meta
          property="article:modified_time"
          content={modDatetime.toISOString()}
        />
      )
    }

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={socialImageURL} />

    <!-- Google Font -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;500;700;800&display=swap"
      rel="stylesheet"
    />

    <meta name="theme-color" content="" />

    {
      // If PUBLIC_GOOGLE_SITE_VERIFICATION is set in the environment variable,
      // include google-site-verification tag in the heading
      // Learn more: https://support.google.com/webmasters/answer/9008080#meta_tag_verification&zippy=%2Chtml-tag
      googleSiteVerification && (
        <meta
          name="google-site-verification"
          content={googleSiteVerification}
        />
      )
    }

    <ViewTransitions />

    <script is:inline src="/toggle-theme.js"></script>

    <script>
      function reveal() {
        var reveals = document.querySelectorAll(".reveal");
        for (var i = 0; i < reveals.length; i++) {
          var windowHeight = window.innerHeight;
          var elementTop = reveals[i].getBoundingClientRect().top;
          var elementVisible = 150;
          if (elementTop < windowHeight - elementVisible) {
            reveals[i].classList.add("active");
          } else {
            reveals[i].classList.remove("active");
          }

          const counters = document.querySelectorAll(".counter");
          // TODO: Let counter to update only when the section is in view, and only once
          function counterUpdate() {
            counters.forEach((counter) => {
              counter.innerHTML = "0";

              const target = Number(counter?.getAttribute("data-target"));

              if (!target) return;

              const updateCounter = () => {
                const c = +counter.innerHTML;
                const increment = target / 201;

                if (c < target) {
                  counter.innerHTML = `${Math.ceil(c + increment)}`;
                  setTimeout(updateCounter, 1);
                } else {
                  return (counter.innerHTML = target.toString()), "en-US";
                }
              };

              updateCounter();
            });
          }

          if (reveals[i].classList.contains("stat-div")) {
            counterUpdate();
          }
        }
      }

      window.addEventListener("scroll", reveal);

      // To check the scroll position on page load
      reveal();
    </script>
  </head>
  <body>
    <Header activeNav={activeNav} />
    <slot />

    <ScrollToTop />

    <ChatButton />
    <Footer />
  </body>
</html>
